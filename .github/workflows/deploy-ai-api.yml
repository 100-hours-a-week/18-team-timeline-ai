name: Deploy to GCP VM

on:
  workflow_call:
    secrets:
      GCP_SSH_USER:
        required: true
      GCP_VM_HOST:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      LANGSMITH_API_KEY:
        required: true
      HF_TOKEN:
        required: true
      REST_API_KEY:
        required: true
      YOUTUBE_API_KEY:
        required: true
      SERP_API_KEYS:
        required: true
      SERPER_API_KEYS:
        required: true
      SERVER_URL:
        required: true
      GCP_SSH_KEY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      checks: write
      pull-requests: write

    env:
      SSH_USER: ${{ secrets.GCP_SSH_USER }}
      SSH_HOST: ${{ secrets.GCP_VM_HOST }}
      AWS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
      REST_API_KEY: ${{ secrets.REST_API_KEY }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      SERP_API_KEYS: ${{ secrets.SERP_API_KEYS }}
      SERPER_API_KEYS: ${{ secrets.SERPER_API_KEYS }}
      SERVER_URL: ${{ secrets.SERVER_URL }}
      GCP_SSH_KEY: ${{ secrets.GCP_SSH_KEY }}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}

    steps:
      - name: Checkout (필요 시)
        uses: actions/checkout@v4

      - name: Write .env file
        run: |
          echo 'LANGSMITH_TRACING=false' > ./.env
          echo 'LANGSMITH_ENDPOINT="https://api.smith.langchain.com/"' >> ./.env
          echo 'LANGSMITH_PROJECT="Project_1st"' >> ./.env
          echo 'MODEL=models/HyperCLOVAX-SEED-Text-Instruct-1.5B' >> ./.env
          echo 'TOKENIZERS_PARALLELISM=false' >> ./.env
          echo 'LANGSMITH_API_KEY=${{ secrets.LANGSMITH_API_KEY }}' >> ./.env
          echo 'HF_TOKEN=${{ secrets.HF_TOKEN }}' >> ./.env
          echo 'REST_API_KEY=${{ secrets.REST_API_KEY }}' >> ./.env
          echo 'YOUTUBE_API_KEY=${{ secrets.YOUTUBE_API_KEY }}' >> ./.env
          echo 'SERP_API_KEYS=${{ secrets.SERP_API_KEYS }}' >> ./.env
          echo 'SERPER_API_KEYS=${{ secrets.SERPER_API_KEYS }}' >> ./.env
          echo 'SERVER=${{ secrets.SERVER_URL }}' >> ./.env
          echo 'OTEL_EXPORTER_OTLP_ENDPOINT=${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}' >> ./.env
          echo 'OTEL_SERVICE_NAME=tamnara-ai-api' >> ./.env
          echo 'OTEL_TRACES_EXPORTER=otlp' >> ./.env
          echo 'OTEL_METRICS_EXPORTER=none' >> ./.env
          echo 'OTEL_LOG_LEVEL=debug' >> ./.env
          echo 'OTEL_PYTHON_LOG_LEVEL=debug' >> ./.env
          echo 'OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf' >> ./.env
          echo 'OTEL_TRACES_SAMPLER=parentbased_always_on' >> ./.env


      - name: Setup SSH key (with verification)
        run: |
          echo "${{ secrets.GCP_SSH_KEY }}" > key.pem
          chmod 600 key.pem


      - name: Upload deploy.sh + .env to GCP VM
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no ./scripts/deploy.sh ${{ secrets.GCP_SSH_USER }}@${{ secrets.GCP_VM_HOST }}:/tmp/deploy.sh
          scp -i key.pem -o StrictHostKeyChecking=no ./.env ${{ secrets.GCP_SSH_USER }}@${{ secrets.GCP_VM_HOST }}:/tmp/.env

      - name: Execute deploy.sh on GCP VM
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.GCP_SSH_USER }}@${{ secrets.GCP_VM_HOST }} "
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

            cd /tmp
            echo '[INFO] Running deploy.sh...'
            bash deploy.sh 2>&1   # 표준에러 포함 모든 출력
            echo '[INFO] Finished deploy.sh.' 

            rm .env
            rm deploy.sh
          "
